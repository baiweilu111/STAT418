# -*- coding: utf-8 -*-
"""main.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gwGmtlj1ccaHqnbQQ6Qgh2EaZWX4DuXc
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# Assuming you have uploaded a file named 'your_file.csv'
df = pd.read_csv(io.BytesIO(uploaded['Problem Set 0 _ 1 - data.csv']))

import pandas as pd
import numpy as np

np.random.seed(0)  # For reproducibility
data = pd.DataFrame({
    'Date': pd.date_range(start='1/1/2017', end='12/31/2017', freq='D'),
    'S1': np.random.randint(0, 100, size=365),
    'S2': np.random.randint(0, 100, size=365),
    'S3': np.random.randint(0, 100, size=365),
    'S4': np.random.randint(0, 100, size=365),
    'S5': np.random.randint(0, 100, size=365),
    'S6': np.random.randint(0, 100, size=365),
    'S7': np.random.randint(0, 100, size=365),
    'S8': np.random.randint(0, 100, size=365),
    'S9': np.random.randint(0, 100, size=365),
    'S10': np.random.randint(0, 100, size=365),
})


# mean sales for S1 to S10
mean_sales = data.loc[:, 'S1':'S10'].mean()

# 'S' with the highest mean sale in 2017
highest_mean_sale = mean_sales.idxmax(), mean_sales.max()

highest_mean_sale

# variance for each day
data['Variance'] = data.loc[:, 'S1':'S10'].var(axis=1)

# highest variance in sales
day_highest_variance = data.loc[data['Variance'].idxmax()]

day_highest_variance[['Date', 'Variance']]

# create a new column
data['Year'] = data['Date'].dt.year

# calculate the median sale for S5
median_sales_s5_by_year = data.groupby('Year')['S5'].median()

year_highest_median_sale_s5 = median_sales_s5_by_year.idxmax(), median_sales_s5_by_year.max()

year_highest_median_sale_s5

# Identify the store that recorded the highest sales for each day
daily_max_sales = data.loc[:, 'S1':'S10'].idxmax(axis=1)

# Count the number of days each store recorded the highest number of sales
store_highest_sales_count = daily_max_sales.value_counts()

# Identify the store with the highest number of days where it recorded the highest sales
store_with_max_days_of_highest_sales = store_highest_sales_count.idxmax(), store_highest_sales_count.max()

store_with_max_days_of_highest_sales

# Calculate the cumulative sum of units sold for each store over the entire time period
cumulative_sales = data.loc[:, 'S1':'S10'].sum().sort_values(ascending=False)

# Find the store that ranks 5th in cumulative sales
fifth_store_cumulative_sales = cumulative_sales.index[4], cumulative_sales[4]

fifth_store_cumulative_sales